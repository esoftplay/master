<?php  if (!defined('_VALID_BBC')) exit('No direct script access allowed');

/*
EXAMPLE : untuk menampilkan Range Tanggal dengan javascript
$form->edit->addInput('date_start','dateinterval');
$form->edit->input->date_start->setTitle('Available');					# optional jika tidak ada maka akan diambil dari inputFieldName yg d ucwords() kan
$form->edit->input->date_start->setEndDateField('date_end');
$form->edit->input->date_start->setPlaintext(true);							# optional
$form->edit->input->date_start->setDefaultValue('now');					# optional
$form->edit->input->date_start->setCaption('Start Date');				# optional jika tidak ada maka caption akan diambil dari title
$form->edit->input->date_end->setTitle('End Date');							# optional INGAT InputFieldName yang digunakan adalah input dari ->setEndDateField()

JIKA SEARCH :
$form->search->addInput('created','dateinterval');
$form->search->input->created->setIsSearchRange();

*/
include_once _PEA_ROOT.'form/FormMultiinput.php';
class FormDateInterval extends FormMultiinput
{
	var $start;
	var $endDate;
	var $isSearchRange = false;
	var $defaultValueEnd, $params, $searchButton;

	function __construct()
	{
		parent::__construct();
		$this->type = 'dateinterval';
		$this->setIsIncludedInSearch( true );
		$this->setIsIncludedInSelectQuery( true );
		$this->setIsIncludedInUpdateQuery( true );
		$this->setSearchQueryLike(true);
		$this->setDelimiter('&nbsp;-&nbsp;');
		// https://bootstrap-datepicker.readthedocs.io/en/1.3.1/options.html#
		$this->params = array(
			'autoclose'                => true,	// Boolean. Default: false -- Whether or not to close the datepicker immediately when a date is selected #autoclose
			// 'before-show-day'       => '',	// Function(Date). Default: $.noop -- A function that takes a date as a parameter #beforeshowday
			// 'calendar-weeks'        => '',	// Boolean. Default: false -- Whether or not to show week numbers to the left of week rows #calendarWeeks
			// 'clear-btn'             => '',	// Boolean. Default: false -- If true, displays a “Clear” button at the bottom of the datepicker to clear the input value. If “autoclose” is also set to true, this button will also close the datepicker. #clearBtn
			// 'days-of-week-disabled' => '',	// String, Array. Default: ‘’, [] -- Days of the week that should be disabled. Values are 0 (Sunday) to 6 (Saturday). Multiple values should be comma-separated #daysOfWeekDisabled
			// 'end-date'              => '',	// Date. Default: End of time -- The latest date that may be selected; all later dates will be disabled.
			// 'force-parse'           => '',	// Boolean. Default: true -- Whether or not to force parsing of the input value when the picker is closed. That is, when an invalid date is left in the input field by the user, the picker will forcibly parse that value, and set the input’s value to the new, valid date, conforming to the given format.
			'format'                   => 'yyyy-mm-dd',	// String. Default: “mm/dd/yyyy” -- The date format, combination of d, dd, D, DD, m, mm, M, MM, yy, yyyy.
			// 'keyboard-navigation'   => '',	// Boolean. Default: true -- Whether or not to allow date navigation by arrow keys.
			// 'language'              => '',	// String. Default: “en” -- The IETF code (eg “en” for English, “pt-BR” for Brazilian Portuguese) of the language to use for month and day names. These will also be used as the input’s value (and subsequently sent to the server in the case of form submissions). If a full code (eg “de-DE”) is supplied the picker will first check for an “de-DE” language and if not found will fallback and check for a “de” language.
			// 'min-view-mode'         => '',	// Number, String. Default: 0, “days” -- Set a limit for the view mode. Accepts: “days” or 0, “months” or 1, and “years” or 2. Gives the ability to pick only a month or an year. The day is set to the 1st for “months”, and the month is set to January for “years”.
			// 'multidate'             => '',	// Boolean, Number. Default: false -- Enable multidate picking. Each date in month view acts as a toggle button, keeping track of which dates the user has selected in order. If a number is given, the picker will limit how many dates can be selected to that number, dropping the oldest dates from the list when the number is exceeded. true equates to no limit. The input’s value (if present) is set to a string generated by joining the dates, formatted, with multidateSeparator
			// 'multidateSeparator'    => '',	// String. Default: ”,” -- The string that will appear between dates when generating the input’s value. When parsing the input’s value for a multidate picker, this will also be used to split the incoming string to separate multiple formatted dates; as such, it is highly recommended that you not use a string that could be a substring of a formatted date (eg, using ‘-‘ to separate dates when your format is ‘yyyy-mm-dd’).
			// 'orientation'           => '',	// String. Default: “auto” -- A space-separated string consisting of one or two of “left” or “right”, “top” or “bottom”, and “auto” (may be omitted); for example, “top left”, “bottom” (horizontal orientation will default to “auto”), “right” (vertical orientation will default to “auto”), “auto top”. Allows for fixed placement of the picker popup.
			// 'start-date'            => '',	// Date. Default: Beginning of time -- The earliest date that may be selected; all earlier dates will be disabled.
			// 'start-view'            => 0,	// Number, String. Default: 0, “month” -- The view that the datepicker should show when it is opened. Accepts values of 0 or “month” for month view (the default), 1 or “year” for the 12-month overview, and 2 or “decade” for the 10-year overview. Useful for date-of-birth datepickers.
			'today-btn'                => true,	// Boolean, “linked”. Default: false -- If true or “linked”, displays a “Today” button at the bottom of the datepicker to select the current date. If true, the “Today” button will only move the current date into view; if “linked”, the current date will also be selected.
			'today-highlight'          => true,	// Boolean. Default: false -- If true, highlights the current date.
			// 'week-start'            => '',	// Integer. Default: 0 -- Day of the week start. 0 (Sunday) to 6 (Saturday)
			);
	}

	function setParam($params = array())
	{
		if (!empty($params) && is_array($params))
		{
			$this->params = array_merge($this->params, $params);
		}
	}

	function getParam()
	{
		$out = array();
		foreach ($this->params as $key => $value)
		{
			if (is_bool($value))
			{
				$value = $value ? 'true' : 'false';
			}
			$out[] = 'data-'.$key.'="'.$value.'"';
		}
		if (!empty($out))
		{
			$out = ' '.implode(' ', $out).' ';
		}else{
			$out = '';
		}
		return $out;
	}

	function setIsSearchRange()
	{
		if ($this->actionType=='search')
		{
			$this->setTitle('Start Date');
			$this->setEndDateField($this->fieldName.'_until', 'End Date');
			$this->isSearchRange = true;
		}
	}

	function setEndDateField($end_date_field, $end_date_title='')
	{
		if ($end_date_field != $this->fieldName.'_until')
		{
			$this->isSearchRange = false;
			$fieldName = $this->fieldName.'_until';
			unset($this->endDate, $this->elements->$fieldName);
		}
		$this->addInput($end_date_field,'text',$end_date_title);
		$this->endDate = $this->elements->$end_date_field;
		if (empty($_POST[$this->endDate->name]))
		{
			$this->endDate->setIsIncludedInSearch( false );
			if (!empty($this->endDate->defaultValue))
			{
				$this->defaultValueEnd = $this->endDate->defaultValue;
			}
		}
		if ($this->isPlaintext)
		{
			$this->endDate->setPlaintext(true);
		}
		if (!empty($this->defaultValueEnd))
		{
			$this->endDate->setDefaultValue($this->defaultValueEnd);
		}
	}

	function setPlaintext( $bool_is_plaintext = false )
	{
		Form::setPlaintext($bool_is_plaintext);
		if (!empty($this->endDate))
		{
			$this->endDate->setPlaintext($bool_is_plaintext);
		}
	}

	// untuk ngeset default value pada Add Form
	// bisa diberi argumen NOW agar terisi saat ini
	function setDefaultValue( $value_start = 'now', $value_end='')
	{
		if ($this->actionType=='search' && $value_start == 'now')
		{
			$value_start = '';
		}
		if (!empty($value_start))
		{
			if (!preg_match('~^[0-9]{4}\-[0-9]{2}\-[0-9]{2}$~s', $value_start))
			{
				$value_start = date('Y-m-d',strtotime($value_start));
			}
		}else{
			$value_start = '';
		}
		if (!empty($value_end))
		{
			if (!preg_match('~^[0-9]{4}\-[0-9]{2}\-[0-9]{2}$~s', $value_end))
			{
				$value_end = date('Y-m-d',strtotime($value_end));
			}
		}else{
			$value_end = $this->actionType=='search' ? '' : $value_start;
		}
		$this->defaultValue    = $value_start;
		$this->defaultValueEnd = $value_end;
		if (!empty($this->endDate))
		{
			$this->endDate->setDefaultValue($value_end);
		}
	}

	function getSearchQuery()
	{
		$searchCondition = '';
		if ($this->isSearchRange)
		{
			if (!empty($this->defaultValue))
			{
				if (!empty($this->defaultValueEnd))
				{
					$searchCondition = 'DATE(`'. $this->fieldName .'`) >= \''. $this->defaultValue .'\' AND DATE(`'. $this->fieldName .'`) <= \''.$this->defaultValueEnd.'\'';
				}else{
					$searchCondition = 'DATE(`'. $this->fieldName .'`) = \''. $this->defaultValue .'\'';
				}
			}
		}else{
			if (isset($this->defaultValue) && $this->defaultValue !== '') // pakai !== supaya 0 (nol) masih bisa di lewatkan
			{
				$val	= $this->defaultValue;
				if($this->like)
				{
					$searchCondition	= '`'. $this->fieldName .'` <= \''. $val .'\'';
				}else{
					$searchCondition	= '`'. $this->fieldName .'` = \''. $val .'\'';
				}
			}// eof if ( isset( $_POST[$this->searchButton->name] ) )
			if (isset($this->defaultValueEnd) && $this->defaultValueEnd !== '') // pakai !== supaya 0 (nol) masih bisa di lewatkan
			{
				if (!empty($searchCondition))
				{
					$searchCondition .= ' AND ';
				}
				$val	= $this->defaultValueEnd;
				if($this->like)
				{
					$searchCondition	.= '`'. $this->endDate->fieldName .'` >= \''. $val .'\'';
				}else{
					$searchCondition	.= '`'. $this->endDate->fieldName .'` = \''. $val .'\'';
				}
			}
		}
		return $searchCondition;
	}

	function getReportOutput( $str_value = '' )
	{
		$output = '';
		if (!is_array($str_value))
		{
			return date('Y M d', strtotime($str_value));
		}
		_func('date');
		list($start,$end) = array_values($str_value);
		$output = date_interval($start, $end);
		$tips = array();
		foreach ( $this->elements as $id=>$element )
		{
			if ($id!=$this->endDate->fieldName)
			{
				$value = !empty($this->parent->arrResult[$element->fieldName]) ? $this->parent->arrResult[$element->fieldName] : @$element->defaultValue;
				$tips[] = '<tr><td>'.$element->title.'</td><td>: '.$element->getReportOutput($value).'</td></tr>';
			}
		}
		if (!empty($tips))
		{
			if (empty($this->caption))
			{
				$this->caption = $this->title;
			}
			$output = '<span class="tips" title="'.htmlentities($this->caption).'" data-toggle="popover" data-placement="auto" data-content="'.htmlentities('<table>'.implode('', $tips).'</table>').'">'.$output.'</span>';
			if (empty($GLOBALS['sys']->tips))
			{
				$GLOBALS['sys']->tips = 1;
				$output .= '<script type="text/javascript">var BS3load_popover = 1;</script>';
			}
		}
		return $output;
	}

	function getOutput( $str_value = '', $str_name = '', $str_extra = '' )
	{
		if (empty($this->endDate)) {
			die( 'FormDateInterval:: setEndDateField($end_date_field, $end_date_title) harus ditentukan terlebih dahulu untuk mengetahui range dari tanggal satu ke lainya' );
		}
		$extra    = trim(implode(' ', [$this->extra, $str_extra]));
		$name     = ( $str_name == '' ) ? $this->name : $str_name;
		$names    = array($name);
		$values   = array($str_value);
		$extras   = array($extra);
		$enddate  = $this->endDate->objectName;
		$element  = $this->elements->$enddate;
		$names[]  = $element->name;
		$values[] = !empty($this->parent->arrResult[$element->fieldName]) ? $this->parent->arrResult[$element->fieldName] : @$element->defaultValue;
		$extras[] = trim(implode(' ', [$element->extra, $this->parent->setDefaultExtra($element)]));
		// RENDERING PLAINTEXT OUTPUT
		if ($this->isPlaintext)
		{
			return $this->getPlaintexOutput($values, $names, $extras);
		}
		// RENDERING NORMAL INPUT OUTPUT
		$out   = array();
		$out[] = '<input name="'.$names[0].'" type="text" value="'. htmlentities($values[0]) .'" '.$extras[0].'>';
		$out[] = '<input name="'.$names[1].'" type="text" value="'. htmlentities($values[1]) .'" '.$extras[1].'>';
		foreach ( $this->elements as $id=>$element )
		{
			if ($id!=$enddate)
			{
				$value  = !empty($this->parent->arrResult[$element->fieldName]) ? $this->parent->arrResult[$element->fieldName] : @$element->defaultValue;
				$name   = $element->name;
				$output = $element->getOutput( $value, $name, $this->parent->setDefaultExtra($element) );
				if (preg_match('~form\-control(\-static)?~is', $output, $m))
				{
					if (!empty($m[1]))
					{
						$output = str_replace('-static', '', $output);
					}
				}else{
					if ($this->actionType!='roll')
					{
						$output = '<div class="form-control">'.$output.'</div>';
					}
				}
				$out[] = $output;
			}
		}


		$GLOBALS['sys']->link_js(_PEA_URL.'includes/FormDateInterval.js');
		$output = implode('<span class="input-group-addon">'.$this->delimiter.'</span>', $out);
		$out = '<div class="input-daterange input-group" '.$this->getParam().'>'.$output.'</div>';
		return $out;
	}
}